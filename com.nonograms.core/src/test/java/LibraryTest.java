/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.nonograms.core.Library;
import com.nonograms.core.Nonograms;
import org.junit.Assert;
import org.junit.Test;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

public class LibraryTest {
  @Test
  public void testSomeLibraryMethod() throws Exception {

    Path currentRelativePath = Paths.get("");
    String s = currentRelativePath.toAbsolutePath().toString();
    System.out.println("Current relative path is: " + s);
    
    Library.main(new String[]{"src/test/resources/g_vinyl_1.jpg", "src/test/resources/nonogram.jpg", "src/test/resources/solution.jpg", "jpg"});
  }

  @Test
  public void test() {
    int[][] solution = new int[][] {
            {1, 1, 1, 1},
            {1, 0, 0, 1},
            {0, 1, 1, 0},
            {0, 1, 0, 0},
    };
    int[][] expectedT = new int[][]{
            {4},
            {1, 1},
            {2},
            {1},
    };

    int[][] expectedL = new int[][]{
            {2},
            {1, 2},
            {1, 1},
            {2},
    };

    ArrayList<Integer>[] t = (ArrayList<Integer>[]) new ArrayList[4];
    ArrayList<Integer>[] l = (ArrayList<Integer>[]) new ArrayList[4];
    Nonograms.createNonogram(solution, 4, 4, t, l);
    for (int i = 0; i < 4; i++) {
      Assert.assertEquals(expectedT[i].length, t[i].size());
      for (int j = 0; j < t[i].size(); j++) {
        Assert.assertEquals(expectedT[i][j], (int)t[i].get(j));
      }
    }
    for (int i = 0; i < 4; i++) {
      Assert.assertEquals(expectedL[i].length, l[i].size());
      for (int j = 0; j < l[i].size(); j++) {
        Assert.assertEquals(expectedL[i][j], (int)l[i].get(j));
      }
    }
  }
}
