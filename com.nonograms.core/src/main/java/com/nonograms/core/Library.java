package com.nonograms.core;

import sun.awt.X11.XSystemTrayPeer;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {

    public static void main(String[] args) throws IOException {
        BufferedImage img = ImageIO.read(new File("/home/vaida/Desktop/thum1bnail.jpeg"));
        changeImage(img);
        File outfile = new File("/home/vaida/Desktop/saved.jpg");
        ImageIO.write(img, "jpg", outfile);
    }

    public static void changeImage(BufferedImage img) {
        //get image width and height
        int numBlocksX = 100;
        int numBlocksY = 100;
        int width = img.getWidth();
        int height = img.getHeight();
        double blockSizeX = (double) width / numBlocksX;
        double blockSizeY = (double) height/ numBlocksY;

        Triplet[][] blocks = new Triplet[numBlocksX][numBlocksY];
        int[][] sizes = new int[numBlocksX][numBlocksY];

        for (int i = 0; i < numBlocksX; i++) {
            for (int j = 0; j < numBlocksY; j++) {
                blocks[i][j] = new Triplet();
            }
        }

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                //get pixel value
                int p = img.getRGB(i,j);
                ColorTransformations ct = new ColorTransformations();
                Color c = ct.pixelToColor(p);
                int posX = (int) (i / blockSizeX);
                int posY = (int) (j / blockSizeY);
                blocks[posX][posY] = blocks[posX][posY].add(new Triplet(c.getRed(), c.getGreen(), c.getBlue()));
                sizes[posX][posY] = sizes[posX][posY] + 1;
            }
        }

        for (int i = 0; i < numBlocksX; i++) {
            for (int j = 0; j < numBlocksY; j++) {
                try {
                    blocks[i][j] = blocks[i][j].divide(sizes[i][j]);
                } catch (Exception e)
                {
                    System.out.println(i + " " + j);
                }
            }
        }

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                //get pixel value
                ColorTransformations ct = new ColorTransformations();
                int posX = (int) (i / blockSizeX);
                int posY = (int) (j / blockSizeY);
                Color c = new Color(blocks[posX][posY].getR(),blocks[posX][posY].getG(),blocks[posX][posY].getB());
                Color newColor = ct.toBlackAndWhite(c);
                int newPixel = ct.colorToPixel(newColor);
                img.setRGB(i ,j, newPixel);
            }
        }

    }
}
